package com.gnss.gnssdatalogger.RinexFileLogger;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Environment;
import android.util.Log;

import com.gnss.gnssdatalogger.Constants;
import com.gnss.gnssdatalogger.Constellations.GpsTime;
import com.gnss.gnssdatalogger.Constellations.Satellites.BdsSatellite;
import com.gnss.gnssdatalogger.Constellations.Satellites.EpochMeasurement;
import com.gnss.gnssdatalogger.Constellations.Satellites.GalileoSatellite;
import com.gnss.gnssdatalogger.Constellations.Satellites.GlonassSatellite;
import com.gnss.gnssdatalogger.Constellations.Satellites.GpsSatellite;
import com.gnss.gnssdatalogger.Constellations.Satellites.QzssSatellite;
import com.gnss.gnssdatalogger.R;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;



public class Rinex {

    private static final String TAG = Rinex.class.getSimpleName();

    private FileWriter out = null;
    private char line[] = new char[81];

    private Context context;
    private int ver;

    public Rinex(Context context, int ver) {
        this.context = context;
        this.ver = ver;
        createFile();
    }

    public void closeFile() {
        Log.i(TAG, "CloseFile");
        try {
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void resetLine() {
        for (int i = 0; i < 80; i++)
            line[i] = ' ';
    }

    private void writeLine(String label) {
        for (int i = 0; i < label.length(); i++)
            line[i + 60] = label.charAt(i);
        try {
            line[80] = '\n';
            out.write(line);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void createFile() {
        Date date = new Date();

        String dateString = new SimpleDateFormat("yyyyMMddHHmmss", Locale.US).format(date);
        String type = "o"; //Observable file
        int year = Integer.parseInt(new SimpleDateFormat("yy", Locale.US).format(date));
        String yearString;
        if (year - 10 < 0)
            yearString = "0" + year;
        else
            yearString = "" + year;
        String fileName = "GN" + dateString + ver + "." + yearString + type;

        try {
            File rootFile = new File(context.getFilesDir().getAbsolutePath(), context.getString(R.string.app_name) + "_Rinex");
            if (!rootFile.exists()) rootFile.mkdirs();

            File file = new File(rootFile, fileName);
            out = new FileWriter(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Log.i(TAG, "CreateFile, File name = " + fileName);
    }

    public void writeHeader(RinexHeader rinexHeader) { //header labels in columns 61-80
        Log.i(TAG, "WriteHeader");
        GpsTime gpsFirstTime=rinexHeader.getGpsTime();

        //RINEX VERSION / TYPE
        resetLine();
        String version = "2.11";
        if (ver == Constants.VER_3_03) version = "3.03";
        String type = "OBSERVATION DATA";
        String source = "M: Mixed";
        for (int i = 0; i < version.length(); i++)
            line[i + 5] = version.charAt(i);
        for (int i = 0; i < type.length(); i++)
            line[i + 20] = type.charAt(i);
        for (int i = 0; i < source.length(); i++)
            line[i + 40] = source.charAt(i);
        writeLine("RINEX VERSION / TYPE");

        //PGM / RUN BY / DATE
        resetLine();
        String program = "GnssRecord";
        String agency = "Butterflying10";
        SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMdd hhmmss", Locale.US);
        formatDate.setTimeZone(TimeZone.getTimeZone("UTC"));
        String dateCreation = formatDate.format(new Date()) + " UTC";
        for (int i = 0; i < program.length(); i++)
            line[i] = program.charAt(i);
        for (int i = 0; i < agency.length(); i++)
            line[i + 20] = agency.charAt(i);
        for (int i = 0; i < dateCreation.length(); i++)
            line[i + 40] = dateCreation.charAt(i);
        writeLine("PGM / RUN BY / DATE");

        //COMMENT
        resetLine();
        for (int i = 2; i < 58; i++)
            line[i] = '-';
        writeLine("COMMENT");
        resetLine();
        String commentLineOne = "Generated by GnssRecord_Rinex application.";
        for (int i = 0; i < commentLineOne.length(); i++)
            line[i + 9] = commentLineOne.charAt(i);
        writeLine("COMMENT");
        resetLine();
        String commentLineTwo = "This application belong to EVERYONE.";
        for (int i = 0; i < commentLineTwo.length(); i++)
            line[i + 9] = commentLineTwo.charAt(i);
        writeLine("COMMENT");
        resetLine();
        for (int i = 2; i < 58; i++)
            line[i] = '-';
        writeLine("COMMENT");


        //MARKER NAME
        resetLine();
        for (int i = 0; i < rinexHeader.getMarkName().length(); i++)
            line[i] = rinexHeader.getMarkName().charAt(i);
        writeLine("MARKER NAME");

        //MARKER TYPE
        if (ver == Constants.VER_3_03) {
            resetLine();
            for (int i = 0; i < rinexHeader.getMarkType().length(); i++)
                line[i] = rinexHeader.getMarkType().toUpperCase().charAt(i);
            writeLine("MARKER TYPE");
        }

        //OBSERVER / AGENCY
        resetLine();
        for (int i = 0; i < rinexHeader.getObserverName().length(); i++)
            line[i] = rinexHeader.getObserverName().charAt(i);
        for (int i = 0; i < rinexHeader.getObserverAgencyName().length(); i++)
            line[i + 20] = rinexHeader.getObserverAgencyName().charAt(i);
        writeLine("OBSERVER / AGENCY");


        //REC # / TYPE / VERS
        resetLine();
        for (int i = 0; i < rinexHeader.getReceiverNumber().length(); i++)
            line[i] = rinexHeader.getReceiverNumber().charAt(i);
        for (int i = 0; i < rinexHeader.getReceiverType().length(); i++)
            line[i + 20] = rinexHeader.getReceiverType().charAt(i);
        for (int i = 0; i < rinexHeader.getReceiverVersion().length(); i++)
            line[i + 40] = rinexHeader.getReceiverVersion().charAt(i);
        writeLine("REC # / TYPE / VERS");


        //ANT # / TYPE
        resetLine();
        for (int i = 0; i < rinexHeader.getAntennaNumber().length(); i++)
            line[i] = rinexHeader.getAntennaNumber().charAt(i);
        for (int i = 0; i < rinexHeader.getAntennaType().length(); i++)
            line[i + 20] = rinexHeader.getAntennaType().charAt(i);
        writeLine("ANT # / TYPE");

        //APPROX POSITION XYZ
        resetLine();
        String xPosition = rinexHeader.getCartesianX();
        String yPosition = rinexHeader.getCartesianY();
        String zPosition = rinexHeader.getCartesianZ();
        for (int i = 0; i < xPosition.length(); i++)
            line[13 - i] = xPosition.charAt(xPosition.length() - 1 - i);
        for (int i = 0; i < yPosition.length(); i++)
            line[27 - i] = yPosition.charAt(yPosition.length() - 1 - i);
        for (int i = 0; i < zPosition.length(); i++)
            line[41 - i] = zPosition.charAt(zPosition.length() - 1 - i);
        writeLine("APPROX POSITION XYZ");

        //ANTENNA: DELTA H/E/N
        resetLine();
        String hDelta = String.format(Locale.US, "%.4f", rinexHeader.getAntennaHeight());
        String eDelta = String.format(Locale.US, "%.4f", rinexHeader.getAntennaEccentricityEast());
        String nDelta = String.format(Locale.US, "%.4f", rinexHeader.getAntennaEccentricityNorth());
        for (int i = 0; i < hDelta.length(); i++)
            line[13 - i] = hDelta.charAt(hDelta.length() - 1 - i);
        for (int i = 0; i < eDelta.length(); i++)
            line[27 - i] = eDelta.charAt(eDelta.length() - 1 - i);
        for (int i = 0; i < nDelta.length(); i++)
            line[41 - i] = nDelta.charAt(nDelta.length() - 1 - i);
        writeLine("ANTENNA: DELTA H/E/N");

        if (ver == Constants.VER_2_11) {
            //# / TYPES OF OBSERV
            String typeOfObserv = "8    C1    L1    D1    S1    C5    L5    D5    S5";
            resetLine();
            for (int i = 0; i < typeOfObserv.length(); i++)
                line[i + 5] = typeOfObserv.charAt(i);
            writeLine("# / TYPES OF OBSERV");
        } else if (ver == Constants.VER_3_03) {
            //SYS / # / OBS TYPES
            String gSys = "G    8 C1C L1C D1C S1C C5Q L5Q D5Q S5Q";
            String rSys = "R    4 C1C L1C D1C S1C";
            String eSys = "E    8 C1C L1C D1C S1C C5Q L5Q D5Q S5Q";
            String cSys = "C    4 C2I L2I D2I S2I";
            String jSys = "J    8 C1C L1C D1C S1C C5Q L5Q D5Q S5Q";
            resetLine();
            for (int i = 0; i < gSys.length(); i++)
                line[i] = gSys.charAt(i);
            writeLine("SYS / # / OBS TYPES");
            resetLine();
            for (int i = 0; i < rSys.length(); i++)
                line[i] = rSys.charAt(i);
            writeLine("SYS / # / OBS TYPES");
            resetLine();
            for (int i = 0; i < eSys.length(); i++)
                line[i] = eSys.charAt(i);
            writeLine("SYS / # / OBS TYPES");
            resetLine();
            for (int i = 0; i < cSys.length(); i++)
                line[i] = cSys.charAt(i);
            writeLine("SYS / # / OBS TYPES");
            resetLine();
            for (int i = 0; i < jSys.length(); i++)
                line[i] = jSys.charAt(i);
            writeLine("SYS / # / OBS TYPES");
        }

        //TIME OF FIRST OBS
        resetLine();
        String year = String.valueOf(gpsFirstTime.getYear());
        String month = String.valueOf(gpsFirstTime.getMonth());
        String day = String.valueOf(gpsFirstTime.getDay());
        String hour = String.valueOf(gpsFirstTime.getHour());
        String min = String.valueOf(gpsFirstTime.getMinute());
        @SuppressLint("DefaultLocale") String sec = String.format("%.7f",gpsFirstTime.getSecond());


        String system = "GPS";
        for (int i = 0; i < year.length(); i++)
            line[5 - i] = year.charAt(year.length() - 1 - i);
        for (int i = 0; i < month.length(); i++)
            line[11 - i] = month.charAt(month.length() - 1 - i);
        for (int i = 0; i < day.length(); i++)
            line[17 - i] = day.charAt(day.length() - 1 - i);
        for (int i = 0; i < hour.length(); i++)
            line[23 - i] = hour.charAt(hour.length() - 1 - i);
        for (int i = 0; i < min.length(); i++)
            line[29 - i] = min.charAt(min.length() - 1 - i);
        for (int i = 0; i < sec.length(); i++)
            line[42 - i] = sec.charAt(sec.length() - 1 - i);
        for (int i = 0; i < system.length(); i++)
            line[50 - i] = system.charAt(system.length() - 1 - i);
        writeLine("TIME OF FIRST OBS");

        if (ver == Constants.VER_3_03) {
            //SYS / PHASE SHIFTS
            char satelliteIdentifier[] = {'G', 'R', 'E', 'C', 'J'};
            resetLine();
            for (char aSatelliteIdentifier : satelliteIdentifier) {
                line[0] = aSatelliteIdentifier;
                writeLine("SYS / PHASE SHIFTS");
            }
        }

        //END OF HEADER
        resetLine();
        writeLine("END OF HEADER");
    }

    //一个历元的数据进行转换
    @SuppressLint("DefaultLocale")
    public void writeBody(EpochMeasurement epochMeasurement)
    {

        if(ver==Constants.VER_3_03)
        {
            StringBuilder stringBuilder = new StringBuilder();
            /*
            每一个历元的开始
             */
            stringBuilder.append(String.format("> %d %2d %2d %2d %2d%11.7f  0%3d", epochMeasurement.getEpochTime().getYear(), epochMeasurement.getEpochTime().getMonth(), epochMeasurement.getEpochTime().getDay(), epochMeasurement.getEpochTime().getHour(), epochMeasurement.getEpochTime().getMinute(), epochMeasurement.getEpochTime().getSecond(), epochMeasurement.getSatelliteNum()));

            stringBuilder.append('\n');

            /*
            开始一个历元的卫星数据
             */
            for (GpsSatellite gpsSatellite : epochMeasurement.getGpsSatelliteList()) {


                if (gpsSatellite.isHasC1() && gpsSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f", gpsSatellite.getPrn(), gpsSatellite.getC1(), gpsSatellite.getL1(), gpsSatellite.getD1(), gpsSatellite.getS1(), gpsSatellite.getC5(), gpsSatellite.getL5(), gpsSatellite.getD5(), gpsSatellite.getS5()));

                    stringBuilder.append('\n');
                }
                if (gpsSatellite.isHasC1() && !gpsSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f", gpsSatellite.getPrn(), gpsSatellite.getC1(), gpsSatellite.getL1(), gpsSatellite.getD1(), gpsSatellite.getS1()));

                    stringBuilder.append('\n');
                }
                if (!gpsSatellite.isHasC1() && gpsSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14s  %14s  %14s  %14s  %14.3f  %14.3f  %14.3f  %14.3f", gpsSatellite.getPrn(), " ", " ", " ", " ", gpsSatellite.getC5(), gpsSatellite.getL5(), gpsSatellite.getD5(), gpsSatellite.getS5()));

                    stringBuilder.append('\n');
                }


            }
            for (QzssSatellite qzssSatellite : epochMeasurement.getQzssSatelliteList()) {
                if (qzssSatellite.isHasC1() && qzssSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f", qzssSatellite.getPrn(), qzssSatellite.getC1(), qzssSatellite.getL1(), qzssSatellite.getD1(), qzssSatellite.getS1(), qzssSatellite.getC5(), qzssSatellite.getL5(), qzssSatellite.getD5(), qzssSatellite.getS5()));

                    stringBuilder.append('\n');
                }
                if (qzssSatellite.isHasC1() && !qzssSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f", qzssSatellite.getPrn(), qzssSatellite.getC1(), qzssSatellite.getL1(), qzssSatellite.getD1(), qzssSatellite.getS1()));

                    stringBuilder.append('\n');
                }
                if (!qzssSatellite.isHasC1() && qzssSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14s  %14s  %14s  %14s  %14.3f  %14.3f  %14.3f  %14.3f", qzssSatellite.getPrn(), " ", " ", " ", " ", qzssSatellite.getC5(), qzssSatellite.getL5(), qzssSatellite.getD5(), qzssSatellite.getS5()));

                    stringBuilder.append('\n');
                }
            }

            for (BdsSatellite bdsSatellite : epochMeasurement.getBdsSatelliteList()) {

                stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f", bdsSatellite.getPrn(), bdsSatellite.getC2I(), bdsSatellite.getL2I(), bdsSatellite.getD2I(), bdsSatellite.getS2I()));
                stringBuilder.append('\n');
            }

            for (GalileoSatellite galileoSatellite : epochMeasurement.getGalileoSatelliteList()) {
                if (galileoSatellite.isHasC1() && galileoSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f  %14.3f", galileoSatellite.getPrn(), galileoSatellite.getC1(), galileoSatellite.getL1(), galileoSatellite.getD1(), galileoSatellite.getS1(), galileoSatellite.getC5(), galileoSatellite.getL5(), galileoSatellite.getD5(), galileoSatellite.getS5()));

                    stringBuilder.append('\n');
                }
                if (galileoSatellite.isHasC1() && !galileoSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f", galileoSatellite.getPrn(), galileoSatellite.getC1(), galileoSatellite.getL1(), galileoSatellite.getD1(), galileoSatellite.getS1()));

                    stringBuilder.append('\n');
                }
                if (!galileoSatellite.isHasC1() && galileoSatellite.isHasC5()) {
                    stringBuilder.append(String.format("%s%14s  %14s  %14s  %14s  %14.3f  %14.3f  %14.3f  %14.3f", galileoSatellite.getPrn(), " ", " ", " ", " ", galileoSatellite.getC5(), galileoSatellite.getL5(), galileoSatellite.getD5(), galileoSatellite.getS5()));

                    stringBuilder.append('\n');
                }
            }
            for (GlonassSatellite glonassSatellite : epochMeasurement.getGlonassSatelliteList()) {
                stringBuilder.append(String.format("%s%14.3f  %14.3f  %14.3f  %14.3f", glonassSatellite.getPrn(), glonassSatellite.getC1C(), glonassSatellite.getL1C(), glonassSatellite.getD1C(), glonassSatellite.getS1C()));
                stringBuilder.append('\n');
            }

            try {
                out.write(stringBuilder.toString());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        if(ver==Constants.VER_2_11)
        {
            StringBuilder stringBuilder = new StringBuilder();

            /*
            每一个历元的开始,, 19 11 26  0  0  0.0000000  0    这个共29个字符  之后是卫星prn  12颗卫星   36个字符
             */
            stringBuilder.append(String.format(" %2d %2d %2d %2d %2d%11.7f  0%3d", epochMeasurement.getEpochTime().getYearSimplify(), epochMeasurement.getEpochTime().getMonth(), epochMeasurement.getEpochTime().getDay(), epochMeasurement.getEpochTime().getHour(), epochMeasurement.getEpochTime().getMinute(), epochMeasurement.getEpochTime().getSecond(), epochMeasurement.getSatelliteNum2()));

            /**
             * 我觉得应该不会有接收卫星个数超过48的情况，不然我就GG了，算了  加个try   catch吧
             */
            if (epochMeasurement.getSatelliteNum2() <= 12) {
                for (int i = 0; i < epochMeasurement.getSatelliteNum2(); i++) {
                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
            }
            if (epochMeasurement.getSatelliteNum2() > 12 && epochMeasurement.getSatelliteNum2() <= 24) {
                for (int i = 0; i < 12; i++) {
                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
                stringBuilder.append("                                ");
                for (int i = 12; i < epochMeasurement.getSatelliteNum2(); i++) {
                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
            }
            if (epochMeasurement.getSatelliteNum2() > 24 && epochMeasurement.getSatelliteNum2() <= 36) {
                for (int i = 0; i < 12; i++) {
                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
                stringBuilder.append("                                ");
                for (int i = 12; i < 24; i++) {

                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
                stringBuilder.append("                                ");
                for (int i = 24; i < epochMeasurement.getSatelliteNum2(); i++) {

                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
            }
            if (epochMeasurement.getSatelliteNum2() > 36 && epochMeasurement.getSatelliteNum2() <= 48) {
                for (int i = 0; i < 12; i++) {
                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
                stringBuilder.append("                                ");
                for (int i = 12; i < 24; i++) {

                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
                stringBuilder.append("                                ");

                for (int i = 24; i < 36; i++) {

                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
                stringBuilder.append("                                ");

                for(int i=36;i<epochMeasurement.getSatelliteNum2();i++)
                {
                    stringBuilder.append(epochMeasurement.getPrnlist().get(i));
                }
                stringBuilder.append('\n');
            }

            /*
            开始一个历元的卫星数据
             */
            for (GpsSatellite gpsSatellite : epochMeasurement.getGpsSatelliteList()) {
                //有L1频率
                if (gpsSatellite.isHasC1()) {

                    stringBuilder.append(String.format("%14.3f  %14.3f  %14.3f  %14.3f", gpsSatellite.getC1(), gpsSatellite.getL1(), gpsSatellite.getD1(), gpsSatellite.getS1()));
                }
                //有L5频率
                if (gpsSatellite.isHasC5()) {
                    stringBuilder.append(String.format("  %14.3f", gpsSatellite.getC5()));
                    stringBuilder.append('\n');
                    stringBuilder.append(String.format("%14.3f  %14.3f  %14.3f", gpsSatellite.getL5(), gpsSatellite.getD5(), gpsSatellite.getS5()));
                    stringBuilder.append('\n');
                }
                else
                {
                    stringBuilder.append('\n');
                    stringBuilder.append('\n');
                }
            }
            for (GalileoSatellite galileoSatellite : epochMeasurement.getGalileoSatelliteList()) {

                //有L1频率
                if (galileoSatellite.isHasC1()) {

                    stringBuilder.append(String.format("%14.3f  %14.3f  %14.3f  %14.3f", galileoSatellite.getC1(), galileoSatellite.getL1(), galileoSatellite.getD1(), galileoSatellite.getS1()));
                }
                //有L5频率
                if (galileoSatellite.isHasC5()) {
                    stringBuilder.append(String.format("  %14.3f", galileoSatellite.getC5()));
                    stringBuilder.append('\n');
                    stringBuilder.append(String.format("%14.3f  %14.3f  %14.3f", galileoSatellite.getL5(), galileoSatellite.getD5(), galileoSatellite.getS5()));
                    stringBuilder.append('\n');
                }
                else
                {
                    stringBuilder.append('\n');
                    stringBuilder.append('\n');
                }

            }
            for (GlonassSatellite glonassSatellite : epochMeasurement.getGlonassSatelliteList()) {
                stringBuilder.append(String.format("%14.3f  %14.3f  %14.3f  %14.3f", glonassSatellite.getC1C(), glonassSatellite.getL1C(), glonassSatellite.getD1C(), glonassSatellite.getS1C()));
                stringBuilder.append('\n');
                stringBuilder.append('\n');
            }
            try {
                out.write(stringBuilder.toString());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }






}